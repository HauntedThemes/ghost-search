{"version":3,"names":[],"mappings":"","sources":["ghost-search.js"],"sourcesContent":["'use strict';\n/**\r\n * @requires ../node_modules/fuzzysort/fuzzysort.js\r\n */\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar GhostSearch =\n/*#__PURE__*/\nfunction () {\n  function GhostSearch(args) {\n    _classCallCheck(this, GhostSearch);\n\n    this.check = false;\n    var defaults = {\n      url: '',\n      key: '',\n      version: 'v3',\n      input: '#ghost-search-field',\n      results: '#ghost-search-results',\n      button: '',\n      defaultValue: '',\n      template: function template(result) {\n        var url = [location.protocol, '//', location.url].join('');\n        return '<a href=\"' + url + '/' + result.slug + '/\">' + result.title + '</a>';\n      },\n      trigger: 'focus',\n      options: {\n        keys: ['title'],\n        limit: 10,\n        threshold: -3500,\n        allowTypo: false\n      },\n      api: {\n        resource: 'posts',\n        parameters: {\n          limit: 'all',\n          fields: ['title', 'slug'],\n          filter: '',\n          include: '',\n          order: '',\n          formats: '',\n          page: ''\n        }\n      },\n      on: {\n        beforeDisplay: function beforeDisplay() {},\n        afterDisplay: function afterDisplay(results) {},\n        beforeFetch: function beforeFetch() {},\n        afterFetch: function afterFetch(results) {}\n      }\n    };\n    var merged = this.mergeDeep(defaults, args);\n    Object.assign(this, merged);\n    this.init();\n  }\n\n  _createClass(GhostSearch, [{\n    key: \"mergeDeep\",\n    value: function mergeDeep(target, source) {\n      var _this = this;\n\n      if (target && _typeof(target) === 'object' && !Array.isArray(target) && target !== null && source && _typeof(source) === 'object' && !Array.isArray(source) && source !== null) {\n        Object.keys(source).forEach(function (key) {\n          if (source[key] && _typeof(source[key]) === 'object' && !Array.isArray(source[key]) && source[key] !== null) {\n            if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));\n\n            _this.mergeDeep(target[key], source[key]);\n          } else {\n            Object.assign(target, _defineProperty({}, key, source[key]));\n          }\n        });\n      }\n\n      return target;\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      var _this2 = this;\n\n      this.on.beforeFetch();\n      var ghostAPI = new GhostContentAPI({\n        url: this.url,\n        key: this.key,\n        version: this.version\n      });\n      var browse = {};\n      var parameters = this.api.parameters;\n\n      for (var key in parameters) {\n        if (parameters[key] != '') {\n          browse[key] = parameters[key];\n        }\n      }\n\n      ghostAPI[this.api.resource].browse(browse).then(function (data) {\n        _this2.search(data);\n      })[\"catch\"](function (err) {\n        console.error(err);\n      });\n    }\n  }, {\n    key: \"createElementFromHTML\",\n    value: function createElementFromHTML(htmlString) {\n      var div = document.createElement('div');\n      div.innerHTML = htmlString.trim();\n      return div.firstChild;\n    }\n  }, {\n    key: \"displayResults\",\n    value: function displayResults(data) {\n      if (document.querySelectorAll(this.results)[0].firstChild !== null && document.querySelectorAll(this.results)[0].firstChild !== '') {\n        while (document.querySelectorAll(this.results)[0].firstChild) {\n          document.querySelectorAll(this.results)[0].removeChild(document.querySelectorAll(this.results)[0].firstChild);\n        }\n      }\n\n      ;\n      var inputValue = document.querySelectorAll(this.input)[0].value;\n\n      if (this.defaultValue != '') {\n        inputValue = this.defaultValue;\n      }\n\n      var results = fuzzysort.go(inputValue, data, {\n        keys: this.options.keys,\n        limit: this.options.limit,\n        allowTypo: this.options.allowTypo,\n        threshold: this.options.threshold\n      });\n\n      for (var key in results) {\n        if (key < results.length) {\n          document.querySelectorAll(this.results)[0].appendChild(this.createElementFromHTML(this.template(results[key].obj)));\n        }\n\n        ;\n      }\n\n      this.on.afterDisplay(results);\n      this.defaultValue = '';\n    }\n  }, {\n    key: \"search\",\n    value: function search(data) {\n      var _this3 = this;\n\n      this.on.afterFetch(data);\n      this.check = true;\n\n      if (this.defaultValue != '') {\n        this.on.beforeDisplay();\n        this.displayResults(data);\n      }\n\n      if (this.button != '') {\n        var button = document.querySelectorAll(this.button)[0];\n\n        if (button.tagName == 'INPUT' && button.type == 'submit') {\n          button.closest('form').addEventListener(\"submit\", function (e) {\n            e.preventDefault();\n          });\n        }\n\n        ;\n        button.addEventListener('click', function (e) {\n          e.preventDefault();\n\n          _this3.on.beforeDisplay();\n\n          _this3.displayResults(data);\n        });\n      } else {\n        document.querySelectorAll(this.input)[0].addEventListener('keyup', function (e) {\n          _this3.on.beforeDisplay();\n\n          _this3.displayResults(data);\n        });\n      }\n\n      ;\n    }\n  }, {\n    key: \"checkArgs\",\n    value: function checkArgs() {\n      if (!document.querySelectorAll(this.input).length) {\n        console.log('Input not found.');\n        return false;\n      }\n\n      if (!document.querySelectorAll(this.results).length) {\n        console.log('Results not found.');\n        return false;\n      }\n\n      ;\n\n      if (this.button != '') {\n        if (!document.querySelectorAll(this.button).length) {\n          console.log('Button not found.');\n          return false;\n        }\n\n        ;\n      }\n\n      if (this.url == '') {\n        console.log('Content API Client Library host missing. Please set the host. Must not end in a trailing slash.');\n        return false;\n      }\n\n      ;\n\n      if (this.key == '') {\n        console.log('Content API Client Library key missing. Please set the key. Hex string copied from the \"Integrations\" screen in Ghost Admin.');\n        return false;\n      }\n\n      ;\n      return true;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      if (!this.checkArgs()) {\n        return false;\n      }\n\n      ;\n      return true;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this4 = this;\n\n      if (!this.validate()) {\n        return;\n      }\n\n      if (this.defaultValue != '') {\n        document.querySelectorAll(this.input)[0].value = this.defaultValue;\n\n        window.onload = function () {\n          if (!_this4.check) {\n            _this4.fetch();\n          }\n\n          ;\n        };\n      }\n\n      if (this.trigger == 'focus') {\n        document.querySelectorAll(this.input)[0].addEventListener('focus', function (e) {\n          if (!_this4.check) {\n            _this4.fetch();\n          }\n\n          ;\n        });\n      } else if (this.trigger == 'load') {\n        window.onload = function () {\n          if (!_this4.check) {\n            _this4.fetch();\n          }\n\n          ;\n        };\n      }\n    }\n  }]);\n\n  return GhostSearch;\n}();"],"file":"ghost-search.js"}